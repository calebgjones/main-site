{
  "version": 3,
  "sources": ["browser-external:https", "../../oxford-dictionary/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https\" has been externalized for browser compatibility. Cannot access \"https.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "var https = require('https');\n\nvar OxfordDictionary = function (obj) {\n    this.config = {\n        app_id: obj.app_id,\n        app_key: obj.app_key,\n        source_lang: obj.source_lang || 'en-us'\n    };\n};\n\n// GET /entries/{source_lang}/{word_id}\n// GET /entries/{source_lang}/{word_id}?fields={filters}\n//     filters should be comma-separated string (e.g. \"filter1,filter2,filter3\")\nOxfordDictionary.prototype.find = function (props) {\n    var path = validate('entries', props, this, null);\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .find\n\n// GET /entries/{source_lang}/{word_id}?fields=definitions\nOxfordDictionary.prototype.definitions = function (props) {\n    var path = validate('entries', props, this, 'definitions');\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .definitions\n\n// GET /entries/{source_lang}/{word_id}?fields=examples\nOxfordDictionary.prototype.examples = function (props) {\n    var path = validate('entries', props, this, 'examples');\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .examples\n\n// GET /entries/{source_lang}/{word_id}?fields=pronunciations\nOxfordDictionary.prototype.pronunciations = function (props) {\n    var path = validate('entries', props, this, 'pronunciations');\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .pronunciations\n\n// GET /lemmas/{source_lang}/{word_id}\n// GET /lemmas/{source_lang}/{word_id}?{filters}\nOxfordDictionary.prototype.inflections = function (props) {\n    var path = validate('lemmas', props, this, null);\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .inflections\n\n//GET /thesaurus/{source_lang}/{word_id}?fields=synonyms\nOxfordDictionary.prototype.synonyms = function (props) {\n    var path = validate('thesaurus', props, this, 'synonyms');\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .synonyms\n\n//GET /thesaurus/{source_lang}/{word_id}?fields=synonyms\nOxfordDictionary.prototype.antonyms = function (props) {\n    var path = validate('thesaurus', props, this, 'antonyms');\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .antonyms\n\n//GET /thesaurus/{source_lang}/{word_id}\nOxfordDictionary.prototype.thesaurus = function (props) {\n    var path = validate('thesaurus', props, this, null);\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .thesaurus\n\n// GET /sentences/{source_language}/{word_id}\nOxfordDictionary.prototype.sentences = function (props) {\n    var path = validate('sentences', props, this, null);\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .sentences\n\n// GET translations/{source_translation_language}/{target_translation_language}/{word_id}\nOxfordDictionary.prototype.translate = function (props) {\n    var path = validate('translations', props, this, null);\n    var options = new OptionObj(path, this.config.app_id, this.config.app_key);\n    return buildRequest(options);\n} // .translate\n\n\n// Validation function\nvar validate = function (endpoint, props, $this, dtype) {\n    let path = `/api/v2/${endpoint}`;\n\n    if (typeof props === 'string') {\n        props = { word: props.toLowerCase() };\n    }\n\n    if (!($this.config.app_id) || !($this.config.app_key)) {\n        throw Error('API_ID or API_KEY is undefined or NULL.');\n    }\n\n    if (typeof props != 'object' && typeof props != 'string') {\n        throw Error('Argument is not of proper type');\n    }\n\n    if (typeof props != 'undefined' && typeof props === 'object') {\n        if (!props.hasOwnProperty('word')) {\n            throw Error('A word must be passed as a prop.');\n        }\n        // translate endpoint\n        if (endpoint === 'translations' && props.hasOwnProperty('target_language') && (typeof props.target_language === 'string')) {\n            path += `/${encodeURIComponent(props.target_language.toLowerCase())}`;\n        }\n\n        if (props.hasOwnProperty('word') && (typeof props.word === 'string')) {\n            path += `/${$this.config.source_lang}/${props.word.toLowerCase()}`;\n        } else {\n            throw Error('Word argument not found');\n        }\n        \n        let fields;\n\n        if (!(dtype === null) && (typeof dtype === 'string') && !(dtype === 'entries')) {\n            if (fields == null) {\n                fields = `?fields=${encodeURIComponent(dtype)}`;\n            } else {\n                fields += `,${encodeURIComponent(dtype)}`;\n            }\n        }\n\n        if (props.hasOwnProperty('filters') && (typeof props.filters === 'string')) {\n            if (fields == null) {\n                fields = `?fields=${encodeURIComponent(props.filters)}`;\n            } else {\n                fields += `,${encodeURIComponent(props.filters)}`;\n            }\n        }\n        if (fields) {\n            path += fields;\n        }\n    }\n    return path;\n}; // end validateProp\n\n// HTTPS Request Promise Builder\nvar buildRequest = function (options) {\n    return new Promise(function (resolve, reject) {\n        https.get(options, function (res) {\n            if (res.statusCode == 404) {\n                return reject(\"No such entry found.\");\n            }\n            if (res.statusCode == 403) {\n                return reject(\"Authentication failed. Remember V2 is not accessible with FREE tier.\");\n            }\n            if (res.statusCode == 414) {\n                return reject(\"URI too long. Your word_id exceeds the maximum 128 characters.\");\n            }\n            if (res.statusCode == 500) {\n                return reject(\"Internal Server Error. Contact the Oxford Dictionary API team\");\n            }\n            if (res.statusCode == 502) {\n                return reject(\"Bad Gateway. Oxford Dictionaries API is down or being upgraded.\");\n            }\n            if (res.statusCode == 503) {\n                return reject(\"Service Unavailable. The Oxford Dictionaries API servers are up, but overloaded with requests. Please try again later.\");\n            }\n            if (res.statusCode == 504) {\n                return reject(\"Gateway timeout. The Oxford Dictionaries API servers are up, but the request couldnâ€™t be serviced due to some failure within our stack. Please try again later.\");\n            }\n\n            var data = \"\";\n\n            res.on('data', function (chunk) {\n                data += chunk;\n            });\n\n            res.on('end', function () {\n                var result;\n                try {\n                    result = JSON.parse(data);\n                } catch (exp) {\n                    result = {\n                        'status_code': 418,\n                        'status_text': 'JSON Parse Failed. Unable to parse response.'\n                    };\n                    reject(result);\n                }\n                resolve(result);\n            });\n\n            res.on('error', function (err) {\n                reject(err);\n            });\n        }); // end https.get\n    }); // end promise\n}; // end buildRequest\n\n\n// Constructor Function for Option Objects\nfunction OptionObj(path, app_id, app_key) {\n    var options = {\n        host: 'od-api.oxforddictionaries.com',\n        port: 443,\n        path: path,\n        method: 'GET',\n        headers: {\n            \"Accept\": \"application/json\",\n            \"app_id\": app_id,\n            \"app_key\": app_key\n        }\n    };\n    return options;\n} // end OptionObj\n\nmodule.exports = OxfordDictionary;\n"],
  "mappings": "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",
  "names": []
}
